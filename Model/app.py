import streamlit as st
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.efficientnet import preprocess_input
from PIL import Image
import matplotlib.pyplot as plt
import io

# ==== Configuration ====
IMG_SIZE = (300, 300)
CLASS_NAMES = [
    "B·ªánh ch√†m (Eczema)",
    "M·ª•n c√≥c/Nhi·ªÖm virus",
    "U h·∫Øc t·ªë (Melanoma)",
    "Vi√™m da c∆° ƒë·ªãa",
    "Ung th∆∞ t·∫ø b√†o ƒë√°y (BCC)",
    "N·ªët ru·ªìi s·∫Øc t·ªë (Nevi)",
    "T·ªïn th∆∞∆°ng s·ª´ng l√†nh t√≠nh (BKL)",
    "V·∫£y n·∫øn/Liken ph·∫≥ng",
    "D√†y s·ª´ng ti·∫øt b√£",
    "N·∫•m da/Nhi·ªÖm n·∫•m"
]

# Disease information
DISEASE_INFO = {
    "B·ªánh ch√†m (Eczema)": "T√¨nh tr·∫°ng da b·ªã ng·ª©a, ƒë·ªè, kh√¥ v√† n·ª©t n·∫ª.",
    "M·ª•n c√≥c/Nhi·ªÖm virus": "C√°c n·ªët s·∫ßn tr√™n da do nhi·ªÖm virus.",
    "U h·∫Øc t·ªë (Melanoma)": "D·∫°ng ung th∆∞ da nguy hi·ªÉm ph√°t tri·ªÉn t·ª´ t·∫ø b√†o s·∫Øc t·ªë.",
    "Vi√™m da c∆° ƒë·ªãa": "T√¨nh tr·∫°ng da m√£n t√≠nh g√¢y ng·ª©a v√† vi√™m.",
    "Ung th∆∞ t·∫ø b√†o ƒë√°y (BCC)": "Lo·∫°i ung th∆∞ da ph·ªï bi·∫øn, th∆∞·ªùng l√† u m√†u da.",
    "N·ªët ru·ªìi s·∫Øc t·ªë (Nevi)": "N·ªët ru·ªìi th√¥ng th∆∞·ªùng, th∆∞·ªùng l√†nh t√≠nh.",
    "T·ªïn th∆∞∆°ng s·ª´ng l√†nh t√≠nh (BKL)": "T·ªïn th∆∞∆°ng da l√†nh t√≠nh, s·∫ßn s√πi, c√≥ v·∫£y.",
    "V·∫£y n·∫øn/Liken ph·∫≥ng": "T√¨nh tr·∫°ng vi√™m da g√¢y m·∫£ng ƒë·ªè, ng·ª©a, c√≥ v·∫£y.",
    "D√†y s·ª´ng ti·∫øt b√£": "T·ªïn th∆∞∆°ng da l√†nh t√≠nh th∆∞·ªùng xu·∫•t hi·ªán ·ªü tu·ªïi trung ni√™n.",
    "N·∫•m da/Nhi·ªÖm n·∫•m": "Nhi·ªÖm n·∫•m g√¢y ng·ª©a, ƒë·ªè v√† tr√≥c v·∫£y da."
}

# ==== Load Model ====
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("model.keras")

# ==== Helper Functions ====
def create_prediction_chart(predictions, class_names):
    # Get top 3 predictions
    top_indices = np.argsort(predictions)[-3:][::-1]
    top_values = [predictions[i] * 100 for i in top_indices]
    top_classes = [class_names[i] for i in top_indices]

    # Create chart
    fig, ax = plt.subplots(figsize=(10, 5))
    bars = ax.barh(top_classes, top_values, color='#4e79a7')
    ax.set_xlim(0, 100)
    ax.set_xlabel('ƒê·ªô tin c·∫≠y (%)')
    ax.set_title('Top 3 d·ª± ƒëo√°n')

    # Add percentage labels
    for bar in bars:
        width = bar.get_width()
        label_x_pos = width + 1
        ax.text(label_x_pos, bar.get_y() + bar.get_height() / 2, f'{width:.1f}%',
                va='center', fontsize=10)

    plt.tight_layout()

    # Convert chart to image
    buf = io.BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    return buf

# ==== Streamlit Interface ====
st.set_page_config(
    page_title="H·ªá th·ªëng D·ª± ƒëo√°n B·ªánh Da li·ªÖu",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown(
    """
    <style>
        .main {
            background-color: #f8f9fa;
        }
        h1, h2, h3 {
            color: #2c3e50;
            font-family: 'Arial', sans-serif;
        }
        .stCard {
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        .stButton>button {
            background-color: #4e79a7;
            color: white;
            border-radius: 5px;
        }
        .css-1d391kg {
            background-color: #2c3e50;
        }
        .result-highlight {
            background-color: #e8f4f8;
            border-left: 4px solid #4e79a7;
            padding: 15px;
            border-radius: 0 8px 8px 0;
            margin: 15px 0;
        }
        .high-confidence {
            color: #27ae60;
            font-weight: bold;
        }
        .medium-confidence {
            color: #f39c12;
            font-weight: bold;
        }
        .low-confidence {
            color: #e74c3c;
            font-weight: bold;
        }
        .css-1v0mbdj {
            border: 2px dashed #4e79a7;
            border-radius: 8px;
            padding: 20px;
            background-color: #f8f9fa;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# ==== Sidebar ====
with st.sidebar:
    st.title("üîç D·ª± ƒëo√°n B·ªánh Da")
    st.markdown("---")
    st.markdown("### Gi·ªõi thi·ªáu")
    st.info(
        "·ª®ng d·ª•ng s·ª≠ d·ª•ng AI ƒë·ªÉ ph√¢n t√≠ch h√¨nh ·∫£nh b·ªánh da li·ªÖu. "
        "C√≥ th·ªÉ nh·∫≠n di·ªán 10 lo·∫°i b·ªánh da ph·ªï bi·∫øn."
    )
    st.markdown("### H∆∞·ªõng d·∫´n")
    st.markdown(
        """
        1. T·∫£i l√™n ·∫£nh t·ªïn th∆∞∆°ng da
        2. Ch·ªù h·ªá th·ªëng ph√¢n t√≠ch
        3. Xem k·∫øt qu·∫£ d·ª± ƒëo√°n
        4. Tham kh·∫£o √Ω ki·∫øn b√°c sƒ©
        """
    )
    st.warning("‚ö†Ô∏è L∆∞u √Ω: ƒê√¢y ch·ªâ l√† c√¥ng c·ª• h·ªó tr·ª£, kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n y khoa.")

# ==== Main Content ====
st.title("üîç H·ªá th·ªëng D·ª± ƒëo√°n B·ªánh Da li·ªÖu b·∫±ng AI")
st.markdown("T·∫£i l√™n h√¨nh ·∫£nh t·ªïn th∆∞∆°ng da ƒë·ªÉ ƒë∆∞·ª£c ph√¢n t√≠ch t·ª± ƒë·ªông")

# Create tabs
tab1, tab2, tab3 = st.tabs(["üì§ T·∫£i ·∫£nh & D·ª± ƒëo√°n", "‚ÑπÔ∏è Th√¥ng tin b·ªánh", "‚ùì H·ªó tr·ª£"])

with tab1:
    # Image upload section
    st.markdown("### T·∫£i l√™n h√¨nh ·∫£nh")
    col1, col2 = st.columns([1, 1])

    with col1:
        st.markdown('<div class="stCard">', unsafe_allow_html=True)
        uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh t·ªïn th∆∞∆°ng da", type=["jpg", "jpeg", "png"])

        if uploaded_file:
            # Display uploaded image
            img = Image.open(uploaded_file)
            st.image(img, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    with col2:
        st.markdown('<div class="stCard">', unsafe_allow_html=True)
        st.markdown("### K·∫øt qu·∫£ ph√¢n t√≠ch")

        if uploaded_file:
            # Process image for prediction
            with st.spinner("ƒêang ph√¢n t√≠ch ·∫£nh..."):
                try:
                    model = load_model()

                    # Preprocess image
                    img_resized = img.resize(IMG_SIZE)
                    img_array = image.img_to_array(img_resized)
                    img_array = preprocess_input(img_array)
                    img_array = np.expand_dims(img_array, axis=0)

                    # Prediction
                    preds = model.predict(img_array)
                    predicted_index = np.argmax(preds[0])
                    confidence = np.max(preds[0]) * 100

                    # Display results
                    st.markdown("#### K·∫øt qu·∫£ d·ª± ƒëo√°n")
                    st.markdown('<div class="result-highlight">', unsafe_allow_html=True)
                    st.markdown(f"**T√¨nh tr·∫°ng d·ª± ƒëo√°n:** {CLASS_NAMES[predicted_index]}")

                    # Confidence level
                    confidence_html = ""
                    if confidence > 80:
                        confidence_html = f'<span class="high-confidence">{confidence:.1f}%</span>'
                    elif confidence > 50:
                        confidence_html = f'<span class="medium-confidence">{confidence:.1f}%</span>'
                    else:
                        confidence_html = f'<span class="low-confidence">{confidence:.1f}%</span>'

                    st.markdown(f"**ƒê·ªô tin c·∫≠y:** {confidence_html}", unsafe_allow_html=True)
                    st.markdown('</div>', unsafe_allow_html=True)

                    # Display disease information
                    st.markdown("#### Th√¥ng tin v·ªÅ b·ªánh")
                    st.info(DISEASE_INFO[CLASS_NAMES[predicted_index]])

                    # Prediction chart
                    chart_image = create_prediction_chart(preds[0], CLASS_NAMES)
                    st.image(chart_image, caption="M·ª©c ƒë·ªô tin c·∫≠y c·ªßa c√°c d·ª± ƒëo√°n", use_column_width=True)

                    st.success("Ph√¢n t√≠ch ho√†n t·∫•t! Vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.")

                except Exception as e:
                    st.error(f"C√≥ l·ªói x·∫£y ra: {str(e)}")
        else:
            st.info("‚è≥ Vui l√≤ng t·∫£i l√™n ·∫£nh ƒë·ªÉ xem k·∫øt qu·∫£ d·ª± ƒëo√°n.")
        st.markdown('</div>', unsafe_allow_html=True)

with tab2:
    st.markdown("### Th√¥ng tin c√°c b·ªánh da li·ªÖu")
    st.markdown('<div class="stCard">', unsafe_allow_html=True)

    # Expandable sections for each disease
    for disease in CLASS_NAMES:
        with st.expander(disease):
            st.markdown(f"**{disease}**")
            st.markdown(DISEASE_INFO[disease])
            st.markdown("---")
            st.markdown("*L∆∞u √Ω: Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© da li·ªÖu ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã ch√≠nh x√°c.*")

    st.markdown('</div>', unsafe_allow_html=True)

with tab3:
    st.markdown("### H·ªó tr·ª£ & C√¢u h·ªèi th∆∞·ªùng g·∫∑p")
    st.markdown('<div class="stCard">', unsafe_allow_html=True)

    st.markdown("#### C√¢u h·ªèi th∆∞·ªùng g·∫∑p")

    with st.expander("Lo·∫°i ·∫£nh n√†o cho k·∫øt qu·∫£ t·ªët nh·∫•t?"):
        st.markdown("""
        ƒê·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t:
        - ·∫¢nh r√µ n√©t, ƒë·ªß s√°ng
        - T·ªïn th∆∞∆°ng da n·∫±m ·ªü trung t√¢m
        - Tr√°nh b√≥ng t·ªëi ho·∫∑c ch√≥i s√°ng
        - N√™n c√≥ ph·∫ßn da l√†nh xung quanh ƒë·ªÉ so s√°nh
        - ·∫¢nh kh√¥ng b·ªã m·ªù
        """)

    with st.expander("ƒê·ªô ch√≠nh x√°c c·ªßa c√¥ng c·ª• n√†y?"):
        st.markdown("""
        C√¥ng c·ª• cung c·∫•p ∆∞·ªõc l∆∞·ª£ng d·ª±a tr√™n d·ªØ li·ªáu hu·∫•n luy·ªán, kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n y khoa.
        ƒê·ªô ch√≠nh x√°c ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng ·∫£nh v√† ƒë·ªô r√µ c·ªßa t·ªïn th∆∞∆°ng.
        Lu√¥n tham kh·∫£o √Ω ki·∫øn b√°c sƒ© chuy√™n khoa.
        """)

    with st.expander("D·ªØ li·ªáu c·ªßa t√¥i c√≥ ƒë∆∞·ª£c b·∫£o m·∫≠t?"):
        st.markdown("""
        C√≥, ·∫£nh b·∫°n t·∫£i l√™n ƒë∆∞·ª£c x·ª≠ l√Ω c·ª•c b·ªô v√† kh√¥ng l∆∞u tr·ªØ vƒ©nh vi·ªÖn.
        ·ª®ng d·ª•ng kh√¥ng chia s·∫ª d·ªØ li·ªáu v·ªõi b√™n th·ª© ba.
        """)

    with st.expander("T√¥i n√™n l√†m g√¨ sau khi c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n?"):
        st.markdown("""
        1. Xem k·∫øt qu·∫£ nh∆∞ th√¥ng tin tham kh·∫£o
        2. ƒê·∫øn g·∫∑p b√°c sƒ© da li·ªÖu
        3. C√≥ th·ªÉ chia s·∫ª k·∫øt qu·∫£ n√†y v·ªõi b√°c sƒ©
        4. Kh√¥ng t·ª± ch·∫©n ƒëo√°n ho·∫∑c t·ª± ƒëi·ªÅu tr·ªã
        """)

    st.markdown('</div>', unsafe_allow_html=True)

# Footer
st.markdown("---")
st.markdown(
    """
    <div style="text-align: center; color: #7f8c8d; font-size: 0.8rem;">
        H·ªá th·ªëng D·ª± ƒëo√°n B·ªánh Da li·ªÖu | C√¥ng c·ª• h·ªó tr·ª£ | Kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n y khoa
    </div>
    """,
    unsafe_allow_html=True
)
